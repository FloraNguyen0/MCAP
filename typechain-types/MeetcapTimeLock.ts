/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MeetcapTimeLockInterface extends utils.Interface {
  contractName: "MeetcapTimeLock";
  functions: {
    "amount()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "factory()": FunctionFragment;
    "lockData()": FunctionFragment;
    "lockDurations()": FunctionFragment;
    "nextReleaseIdx()": FunctionFragment;
    "release()": FunctionFragment;
    "releaseDates()": FunctionFragment;
    "releasePercents()": FunctionFragment;
    "releasedAmount()": FunctionFragment;
    "startDate()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockDurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextReleaseIdx",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseDates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasePercents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextReleaseIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "Released(uint256,uint256,uint32,uint32,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
}

export type ReleasedEvent = TypedEvent<
  [BigNumber, BigNumber, number, number, BigNumber],
  {
    phaseReleasedAmount: BigNumber;
    totalReleasedAmount: BigNumber;
    fromIdx: number;
    toIdx: number;
    date: BigNumber;
  }
>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export interface MeetcapTimeLock extends BaseContract {
  contractName: "MeetcapTimeLock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeetcapTimeLockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    lockData(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        number[],
        BigNumber[],
        number,
        string
      ] & {
        user: string;
        token_: string;
        amount_: BigNumber;
        releasedAmount_: BigNumber;
        startDate_: BigNumber;
        lockDurations_: number[];
        releasePercents_: number[];
        releaseDates_: BigNumber[];
        nextReleaseIdx_: number;
        factory_: string;
      }
    >;

    lockDurations(overrides?: CallOverrides): Promise<[number[]]>;

    nextReleaseIdx(overrides?: CallOverrides): Promise<[number]>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseDates(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    releasePercents(overrides?: CallOverrides): Promise<[number[]]>;

    releasedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  lockData(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number[],
      number[],
      BigNumber[],
      number,
      string
    ] & {
      user: string;
      token_: string;
      amount_: BigNumber;
      releasedAmount_: BigNumber;
      startDate_: BigNumber;
      lockDurations_: number[];
      releasePercents_: number[];
      releaseDates_: BigNumber[];
      nextReleaseIdx_: number;
      factory_: string;
    }
  >;

  lockDurations(overrides?: CallOverrides): Promise<number[]>;

  nextReleaseIdx(overrides?: CallOverrides): Promise<number>;

  release(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseDates(overrides?: CallOverrides): Promise<BigNumber[]>;

  releasePercents(overrides?: CallOverrides): Promise<number[]>;

  releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    lockData(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        number[],
        BigNumber[],
        number,
        string
      ] & {
        user: string;
        token_: string;
        amount_: BigNumber;
        releasedAmount_: BigNumber;
        startDate_: BigNumber;
        lockDurations_: number[];
        releasePercents_: number[];
        releaseDates_: BigNumber[];
        nextReleaseIdx_: number;
        factory_: string;
      }
    >;

    lockDurations(overrides?: CallOverrides): Promise<number[]>;

    nextReleaseIdx(overrides?: CallOverrides): Promise<number>;

    release(overrides?: CallOverrides): Promise<boolean>;

    releaseDates(overrides?: CallOverrides): Promise<BigNumber[]>;

    releasePercents(overrides?: CallOverrides): Promise<number[]>;

    releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Released(uint256,uint256,uint32,uint32,uint64)"(
      phaseReleasedAmount?: null,
      totalReleasedAmount?: null,
      fromIdx?: null,
      toIdx?: null,
      date?: null
    ): ReleasedEventFilter;
    Released(
      phaseReleasedAmount?: null,
      totalReleasedAmount?: null,
      fromIdx?: null,
      toIdx?: null,
      date?: null
    ): ReleasedEventFilter;
  };

  estimateGas: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    lockData(overrides?: CallOverrides): Promise<BigNumber>;

    lockDurations(overrides?: CallOverrides): Promise<BigNumber>;

    nextReleaseIdx(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseDates(overrides?: CallOverrides): Promise<BigNumber>;

    releasePercents(overrides?: CallOverrides): Promise<BigNumber>;

    releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockDurations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextReleaseIdx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseDates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releasePercents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releasedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
