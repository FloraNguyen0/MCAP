/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenTimeLock, TokenTimeLockInterface } from "../TokenTimeLock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "factory_",
        type: "address",
      },
      {
        internalType: "address",
        name: "user_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "uint32[]",
        name: "lockDurations_",
        type: "uint32[]",
      },
      {
        internalType: "uint32[]",
        name: "releasePercents_",
        type: "uint32[]",
      },
      {
        internalType: "uint64",
        name: "startDate_",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "phaseReleasedAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalReleasedAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "fromIdx",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "toIdx",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "date",
        type: "uint64",
      },
    ],
    name: "Released",
    type: "event",
  },
  {
    inputs: [],
    name: "amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "beneficiary",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockData",
    outputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "releasedAmount_",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "startDate_",
        type: "uint64",
      },
      {
        internalType: "uint32[]",
        name: "lockDurations_",
        type: "uint32[]",
      },
      {
        internalType: "uint32[]",
        name: "releasePercents_",
        type: "uint32[]",
      },
      {
        internalType: "uint64[]",
        name: "releaseDates_",
        type: "uint64[]",
      },
      {
        internalType: "uint32",
        name: "nextReleaseIdx_",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "factory_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockDurations",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextReleaseIdx",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "release",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "releaseDates",
    outputs: [
      {
        internalType: "uint64[]",
        name: "",
        type: "uint64[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "releasePercents",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "releasedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startDate",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IBEP20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";

type TokenTimeLockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTimeLockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTimeLock__factory extends ContractFactory {
  constructor(...args: TokenTimeLockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TokenTimeLock";
  }

  deploy(
    factory_: string,
    user_: string,
    token_: string,
    amount_: BigNumberish,
    lockDurations_: BigNumberish[],
    releasePercents_: BigNumberish[],
    startDate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenTimeLock> {
    return super.deploy(
      factory_,
      user_,
      token_,
      amount_,
      lockDurations_,
      releasePercents_,
      startDate_,
      overrides || {}
    ) as Promise<TokenTimeLock>;
  }
  getDeployTransaction(
    factory_: string,
    user_: string,
    token_: string,
    amount_: BigNumberish,
    lockDurations_: BigNumberish[],
    releasePercents_: BigNumberish[],
    startDate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      factory_,
      user_,
      token_,
      amount_,
      lockDurations_,
      releasePercents_,
      startDate_,
      overrides || {}
    );
  }
  attach(address: string): TokenTimeLock {
    return super.attach(address) as TokenTimeLock;
  }
  connect(signer: Signer): TokenTimeLock__factory {
    return super.connect(signer) as TokenTimeLock__factory;
  }
  static readonly contractName: "TokenTimeLock";
  public readonly contractName: "TokenTimeLock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTimeLockInterface {
    return new utils.Interface(_abi) as TokenTimeLockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTimeLock {
    return new Contract(address, _abi, signerOrProvider) as TokenTimeLock;
  }
}
